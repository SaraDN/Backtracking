package Backtracking_Practice;

import java.util.Scanner;

public class Permutations {

	static Scanner sc = new Scanner(System.in);
	static int n = sc.nextInt();
	static int[] v = new int[n + 1];

	public static void main(String[] args) {
		bkt(1);
	}

	public static void bkt(int k) {
		for (int i = 1; i <= n; i++) {
			System.out.println("Begin v[" + k + "] = " + i + "// k = " + k + "   i = " + i);
			v[k] = i;
			System.out.println(v[k]);
			if (valid(k)) {
				if (k == n)
					printSolution(v);
				else {
					System.out.println("BACK // k = " + (k + 1));
					bkt(k + 1);
				}

			}
		}
	}

	public static Boolean valid(int k) {
		for (int i = 1; i < k; ++i)
			if (v[k] == v[i]) {
				System.out.println("Checking if they are different " + " v[" + k + "] with v[" + i + "] // v[k] = " + v[k]
						+ "    v[i] = " + v[i]);
				System.out.println("They are not, we'll return false");
				return false;
			}

		return true;
	}

	public static void printSolution(int v[]) {
		for (int i = 1; i <= n; i++)
			System.out.print("This is a solution: " + v[i] + " ");
		System.out.println();
	}

}
